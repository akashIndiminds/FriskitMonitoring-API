{
  "info": {
    "_postman_id": "12345678-1234-1234-1234-123456789012",
    "name": "Friskit Monitoring API",
    "description": "Raw path handling - no path manipulation",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000/api",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "john_doe",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üè• Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        }
      }
    },
    {
      "name": "üìã API Info",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/info",
          "host": ["{{baseUrl}}"],
          "path": ["info"]
        }
      }
    },
    {
      "name": "‚ûï Create API Logs Alias",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": \"{{userId}}\",\n  \"aliasName\": \"API-Logs\",\n  \"basePath\": \"\\\\\\\\db-indiminds\\\\C\\\\Friskit\\\\BAT-Files\\\\latest\\\\logs\\\\Frisk-API\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/alias-logs/alias",
          "host": ["{{baseUrl}}"],
          "path": ["alias-logs", "alias"]
        }
      }
    },
    {
      "name": "‚ûï Create UI Logs Alias",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": \"{{userId}}\",\n  \"aliasName\": \"UI-Logs\",\n  \"basePath\": \"\\\\\\\\db-indiminds\\\\C\\\\Friskit\\\\BAT-Files\\\\latest\\\\logs\\\\Frisk-UI\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/alias-logs/alias",
          "host": ["{{baseUrl}}"],
          "path": ["alias-logs", "alias"]
        }
      }
    },
    {
      "name": "‚ûï Create Adapter Logs Alias",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": \"{{userId}}\",\n  \"aliasName\": \"Adapter-Logs\",\n  \"basePath\": \"\\\\\\\\db-indiminds\\\\C\\\\Friskit\\\\BAT-Files\\\\latest\\\\logs\\\\Frisk-Adapter\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/alias-logs/alias",
          "host": ["{{baseUrl}}"],
          "path": ["alias-logs", "alias"]
        }
      }
    },
    {
      "name": "üìã Get User Aliases",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/alias-logs/user/{{userId}}/aliases",
          "host": ["{{baseUrl}}"],
          "path": ["alias-logs", "user", "{{userId}}", "aliases"]
        }
      }
    },
    {
      "name": "üìä Get API Logs (Today)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/alias-logs/user/{{userId}}/alias/API-Logs",
          "host": ["{{baseUrl}}"],
          "path": ["alias-logs", "user", "{{userId}}", "alias", "API-Logs"]
        }
      }
    },
    {
      "name": "üìä Get UI Logs (Today)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/alias-logs/user/{{userId}}/alias/UI-Logs",
          "host": ["{{baseUrl}}"],
          "path": ["alias-logs", "user", "{{userId}}", "alias", "UI-Logs"]
        }
      }
    },
    {
      "name": "üìä Get Adapter Logs (Today)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/alias-logs/user/{{userId}}/alias/Adapter-Logs",
          "host": ["{{baseUrl}}"],
          "path": ["alias-logs", "user", "{{userId}}", "alias", "Adapter-Logs"]
        }
      }
    },
    {
      "name": "üìä Get Specific Date Logs",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/alias-logs/user/{{userId}}/alias/API-Logs?date=2025-09-01",
          "host": ["{{baseUrl}}"],
          "path": ["alias-logs", "user", "{{userId}}", "alias", "API-Logs"],
          "query": [
            {
              "key": "date",
              "value": "2025-09-01",
              "description": "YYYY-MM-DD format"
            }
          ]
        }
      }
    },
    {
      "name": "üåê Get All User Logs (Polling)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/alias-logs/user/{{userId}}/all",
          "host": ["{{baseUrl}}"],
          "path": ["alias-logs", "user", "{{userId}}", "all"]
        }
      }
    },
    {
      "name": "üóëÔ∏è Delete Alias",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/alias-logs/user/{{userId}}/alias/API-Logs",
          "host": ["{{baseUrl}}"],
          "path": ["alias-logs", "user", "{{userId}}", "alias", "API-Logs"]
        }
      }
    },
    {
      "name": "üë• Get All Users (Admin)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/alias-logs/admin/users",
          "host": ["{{baseUrl}}"],
          "path": ["alias-logs", "admin", "users"]
        }
      }
    }
  ],
  "event": [
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Basic response validation",
          "pm.test(\"Response should be JSON\", function () {",
          "    pm.response.to.be.json;",
          "});",
          "",
          "pm.test(\"Response should have success field\", function () {",
          "    var jsonData = pm.response.json();",
          "    pm.expect(jsonData).to.have.property('success');",
          "});"
        ],
        "type": "text/javascript"
      }
    }
  ]
}
